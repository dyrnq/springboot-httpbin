/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Request inspection", description = "Inspect the request data")
public interface RequestInspectionApi {

    /**
     * GET /headers : Return the incoming request&#39;s HTTP headers.
     *
     * @return The request&#39;s headers. (status code 200)
     */
    @Operation(
        operationId = "headersGet",
        summary = "Return the incoming request's HTTP headers.",
        tags = { "Request inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's headers.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/headers"
    )
    
    default Mono<ResponseEntity<Void>> headersGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /ip : Returns the requester&#39;s IP Address.
     *
     * @return The Requester&#39;s IP Address. (status code 200)
     */
    @Operation(
        operationId = "ipGet",
        summary = "Returns the requester's IP Address.",
        tags = { "Request inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The Requester's IP Address.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ip"
    )
    
    default Mono<ResponseEntity<Void>> ipGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /user-agent : Return the incoming requests&#39;s User-Agent header.
     *
     * @return The request&#39;s User-Agent header. (status code 200)
     */
    @Operation(
        operationId = "userAgentGet",
        summary = "Return the incoming requests's User-Agent header.",
        tags = { "Request inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's User-Agent header.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user-agent"
    )
    
    default Mono<ResponseEntity<Void>> userAgentGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
