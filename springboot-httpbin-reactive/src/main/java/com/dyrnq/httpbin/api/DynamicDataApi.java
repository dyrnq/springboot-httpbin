/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import java.math.BigDecimal;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Dynamic data", description = "Generates random and dynamic data")
public interface DynamicDataApi {

    /**
     * GET /base64/{value} : Decodes base64url-encoded string.
     *
     * @param value  (required)
     * @return Decoded base64 content. (status code 200)
     */
    @Operation(
        operationId = "base64ValueGet",
        summary = "Decodes base64url-encoded string.",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Decoded base64 content.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/base64/{value}"
    )
    
    default Mono<ResponseEntity<Void>> base64ValueGet(
        @Parameter(name = "value", description = "", required = true, in = ParameterIn.PATH) @PathVariable("value") String value,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /bytes/{n} : Returns n random bytes generated with given seed
     *
     * @param n  (required)
     * @return Bytes. (status code 200)
     */
    @Operation(
        operationId = "bytesNGet",
        summary = "Returns n random bytes generated with given seed",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bytes.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bytes/{n}"
    )
    
    default Mono<ResponseEntity<Void>> bytesNGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /delay/{delay} : Returns a delayed response (max of 10 seconds).
     *
     * @param delay  (required)
     * @return A delayed response. (status code 200)
     */
    @Operation(
        operationId = "delayDelayDelete",
        summary = "Returns a delayed response (max of 10 seconds).",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A delayed response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/delay/{delay}"
    )
    
    default Mono<ResponseEntity<Void>> delayDelayDelete(
        @Parameter(name = "delay", description = "", required = true, in = ParameterIn.PATH) @PathVariable("delay") Integer delay,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /delay/{delay} : Returns a delayed response (max of 10 seconds).
     *
     * @param delay  (required)
     * @return A delayed response. (status code 200)
     */
    @Operation(
        operationId = "delayDelayGet",
        summary = "Returns a delayed response (max of 10 seconds).",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A delayed response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delay/{delay}"
    )
    
    default Mono<ResponseEntity<Void>> delayDelayGet(
        @Parameter(name = "delay", description = "", required = true, in = ParameterIn.PATH) @PathVariable("delay") Integer delay,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * PATCH /delay/{delay} : Returns a delayed response (max of 10 seconds).
     *
     * @param delay  (required)
     * @return A delayed response. (status code 200)
     */
    @Operation(
        operationId = "delayDelayPatch",
        summary = "Returns a delayed response (max of 10 seconds).",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A delayed response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/delay/{delay}"
    )
    
    default Mono<ResponseEntity<Void>> delayDelayPatch(
        @Parameter(name = "delay", description = "", required = true, in = ParameterIn.PATH) @PathVariable("delay") Integer delay,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /delay/{delay} : Returns a delayed response (max of 10 seconds).
     *
     * @param delay  (required)
     * @return A delayed response. (status code 200)
     */
    @Operation(
        operationId = "delayDelayPost",
        summary = "Returns a delayed response (max of 10 seconds).",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A delayed response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delay/{delay}"
    )
    
    default Mono<ResponseEntity<Void>> delayDelayPost(
        @Parameter(name = "delay", description = "", required = true, in = ParameterIn.PATH) @PathVariable("delay") Integer delay,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * PUT /delay/{delay} : Returns a delayed response (max of 10 seconds).
     *
     * @param delay  (required)
     * @return A delayed response. (status code 200)
     */
    @Operation(
        operationId = "delayDelayPut",
        summary = "Returns a delayed response (max of 10 seconds).",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A delayed response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delay/{delay}"
    )
    
    default Mono<ResponseEntity<Void>> delayDelayPut(
        @Parameter(name = "delay", description = "", required = true, in = ParameterIn.PATH) @PathVariable("delay") Integer delay,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /drip : Drips data over a duration after an optional initial delay.
     *
     * @param duration The amount of time (in seconds) over which to drip each byte (optional, default to 2.0)
     * @param numbytes The number of bytes to respond with (optional, default to 10)
     * @param code The response code that will be returned (optional, default to 200)
     * @param delay The amount of time (in seconds) to delay before responding (optional, default to 2.0)
     * @return A dripped response. (status code 200)
     */
    @Operation(
        operationId = "dripGet",
        summary = "Drips data over a duration after an optional initial delay.",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A dripped response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/drip"
    )
    
    default Mono<ResponseEntity<Void>> dripGet(
        @Parameter(name = "duration", description = "The amount of time (in seconds) over which to drip each byte", in = ParameterIn.QUERY) @Valid @RequestParam(value = "duration", required = false, defaultValue = "2.0") BigDecimal duration,
        @Parameter(name = "numbytes", description = "The number of bytes to respond with", in = ParameterIn.QUERY) @Valid @RequestParam(value = "numbytes", required = false, defaultValue = "10") Integer numbytes,
        @Parameter(name = "code", description = "The response code that will be returned", in = ParameterIn.QUERY) @Valid @RequestParam(value = "code", required = false, defaultValue = "200") Integer code,
        @Parameter(name = "delay", description = "The amount of time (in seconds) to delay before responding", in = ParameterIn.QUERY) @Valid @RequestParam(value = "delay", required = false, defaultValue = "2.0") BigDecimal delay,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /links/{n}/{offset} : Generate a page containing n links to other pages which do the same.
     *
     * @param n  (required)
     * @param offset  (required)
     * @return HTML links. (status code 200)
     */
    @Operation(
        operationId = "linksNOffsetGet",
        summary = "Generate a page containing n links to other pages which do the same.",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "HTML links.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/links/{n}/{offset}"
    )
    
    default Mono<ResponseEntity<Void>> linksNOffsetGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n,
        @Parameter(name = "offset", description = "", required = true, in = ParameterIn.PATH) @PathVariable("offset") Integer offset,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /range/{numbytes} : Streams n random bytes generated with given seed, at given chunk size per packet.
     *
     * @param numbytes  (required)
     * @return Bytes. (status code 200)
     */
    @Operation(
        operationId = "rangeNumbytesGet",
        summary = "Streams n random bytes generated with given seed, at given chunk size per packet.",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bytes.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/range/{numbytes}"
    )
    
    default Mono<ResponseEntity<Void>> rangeNumbytesGet(
        @Parameter(name = "numbytes", description = "", required = true, in = ParameterIn.PATH) @PathVariable("numbytes") Integer numbytes,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /stream-bytes/{n} : Streams n random bytes generated with given seed, at given chunk size per packet.
     *
     * @param n  (required)
     * @return Bytes. (status code 200)
     */
    @Operation(
        operationId = "streamBytesNGet",
        summary = "Streams n random bytes generated with given seed, at given chunk size per packet.",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bytes.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stream-bytes/{n}"
    )
    
    default Mono<ResponseEntity<Void>> streamBytesNGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /stream/{n} : Stream n JSON responses
     *
     * @param n  (required)
     * @return Streamed JSON responses. (status code 200)
     */
    @Operation(
        operationId = "streamNGet",
        summary = "Stream n JSON responses",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Streamed JSON responses.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stream/{n}"
    )
    
    default Mono<ResponseEntity<Void>> streamNGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /uuid : Return a UUID4.
     *
     * @return A UUID4. (status code 200)
     */
    @Operation(
        operationId = "uuidGet",
        summary = "Return a UUID4.",
        tags = { "Dynamic data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A UUID4.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/uuid"
    )
    
    default Mono<ResponseEntity<Void>> uuidGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
