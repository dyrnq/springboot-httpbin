/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Response inspection", description = "Inspect the response data like caching and headers")
public interface ResponseInspectionApi {

    /**
     * GET /cache : Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.
     *
     * @param ifModifiedSince  (optional)
     * @param ifNoneMatch  (optional)
     * @return Cached response (status code 200)
     *         or Modified (status code 304)
     */
    @Operation(
        operationId = "cacheGet",
        summary = "Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.",
        tags = { "Response inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cached response"),
            @ApiResponse(responseCode = "304", description = "Modified")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cache"
    )
    
    default Mono<ResponseEntity<Void>> cacheGet(
        @Parameter(name = "If-Modified-Since", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "If-Modified-Since", required = false) String ifModifiedSince,
        @Parameter(name = "If-None-Match", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /cache/{value} : Sets a Cache-Control header for n seconds.
     *
     * @param value  (required)
     * @return Cache control set (status code 200)
     */
    @Operation(
        operationId = "cacheValueGet",
        summary = "Sets a Cache-Control header for n seconds.",
        tags = { "Response inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cache control set")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cache/{value}"
    )
    
    default Mono<ResponseEntity<Void>> cacheValueGet(
        @Parameter(name = "value", description = "", required = true, in = ParameterIn.PATH) @PathVariable("value") Integer value,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /etag/{etag} : Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.
     *
     * @param etag  (required)
     * @param ifNoneMatch  (optional)
     * @param ifMatch  (optional)
     * @return Normal response (status code 200)
     *         or match (status code 412)
     */
    @Operation(
        operationId = "etagEtagGet",
        summary = "Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.",
        tags = { "Response inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Normal response"),
            @ApiResponse(responseCode = "412", description = "match")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/etag/{etag}"
    )
    
    default Mono<ResponseEntity<Void>> etagEtagGet(
        @Parameter(name = "etag", description = "", required = true, in = ParameterIn.PATH) @PathVariable("etag") String etag,
        @Parameter(name = "If-None-Match", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "If-None-Match", required = false) String ifNoneMatch,
        @Parameter(name = "If-Match", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = false) String ifMatch,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /response-headers : Returns a set of response headers from the query string.
     *
     * @param freeform  (optional)
     * @return Response headers (status code 200)
     */
    @Operation(
        operationId = "responseHeadersGet",
        summary = "Returns a set of response headers from the query string.",
        tags = { "Response inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response headers")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/response-headers"
    )
    
    default Mono<ResponseEntity<Void>> responseHeadersGet(
        @Parameter(name = "freeform", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "freeform", required = false) String freeform,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /response-headers : Returns a set of response headers from the query string.
     *
     * @param freeform  (optional)
     * @return Response headers (status code 200)
     */
    @Operation(
        operationId = "responseHeadersPost",
        summary = "Returns a set of response headers from the query string.",
        tags = { "Response inspection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response headers")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/response-headers"
    )
    
    default Mono<ResponseEntity<Void>> responseHeadersPost(
        @Parameter(name = "freeform", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "freeform", required = false) String freeform,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
