/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Response formats", description = "Returns responses in different data formats")
public interface ResponseFormatsApi {

    /**
     * GET /brotli : Returns Brotli-encoded data.
     *
     * @return Brotli-encoded data. (status code 200)
     */
    @Operation(
        operationId = "brotliGet",
        summary = "Returns Brotli-encoded data.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Brotli-encoded data.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/brotli"
    )
    
    default Mono<ResponseEntity<Void>> brotliGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /deflate : Returns Deflate-encoded data.
     *
     * @return Defalte-encoded data. (status code 200)
     */
    @Operation(
        operationId = "deflateGet",
        summary = "Returns Deflate-encoded data.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Defalte-encoded data.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/deflate"
    )
    
    default Mono<ResponseEntity<Void>> deflateGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /deny : Returns page denied by robots.txt rules.
     *
     * @return Denied message (status code 200)
     */
    @Operation(
        operationId = "denyGet",
        summary = "Returns page denied by robots.txt rules.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Denied message")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/deny"
    )
    
    default Mono<ResponseEntity<Void>> denyGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /encoding/utf8 : Returns a UTF-8 encoded body.
     *
     * @return Encoded UTF-8 content. (status code 200)
     */
    @Operation(
        operationId = "encodingUtf8Get",
        summary = "Returns a UTF-8 encoded body.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Encoded UTF-8 content.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/encoding/utf8"
    )
    
    default Mono<ResponseEntity<Void>> encodingUtf8Get(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /gzip : Returns GZip-encoded data.
     *
     * @return GZip-encoded data. (status code 200)
     */
    @Operation(
        operationId = "gzipGet",
        summary = "Returns GZip-encoded data.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "GZip-encoded data.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gzip"
    )
    
    default Mono<ResponseEntity<Void>> gzipGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /html : Returns a simple HTML document.
     *
     * @return An HTML page. (status code 200)
     */
    @Operation(
        operationId = "htmlGet",
        summary = "Returns a simple HTML document.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An HTML page.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/html"
    )
    
    default Mono<ResponseEntity<Void>> htmlGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /json : Returns a simple JSON document.
     *
     * @return An JSON document. (status code 200)
     */
    @Operation(
        operationId = "jsonGet",
        summary = "Returns a simple JSON document.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An JSON document.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/json"
    )
    
    default Mono<ResponseEntity<Void>> jsonGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /robots.txt : Returns some robots.txt rules.
     *
     * @return Robots file (status code 200)
     */
    @Operation(
        operationId = "robotsTxtGet",
        summary = "Returns some robots.txt rules.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Robots file")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/robots.txt"
    )
    
    default Mono<ResponseEntity<Void>> robotsTxtGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /xml : Returns a simple XML document.
     *
     * @return An XML document. (status code 200)
     */
    @Operation(
        operationId = "xmlGet",
        summary = "Returns a simple XML document.",
        tags = { "Response formats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An XML document.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/xml"
    )
    
    default Mono<ResponseEntity<Void>> xmlGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
