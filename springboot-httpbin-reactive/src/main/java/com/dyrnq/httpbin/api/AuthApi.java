/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Auth", description = "Auth methods")
public interface AuthApi {

    /**
     * GET /basic-auth/{user}/{passwd} : Prompts the user for authorization using HTTP Basic Auth.
     *
     * @param user  (required)
     * @param passwd  (required)
     * @return Sucessful authentication. (status code 200)
     *         or Unsuccessful authentication. (status code 401)
     */
    @Operation(
        operationId = "basicAuthUserPasswdGet",
        summary = "Prompts the user for authorization using HTTP Basic Auth.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessful authentication."),
            @ApiResponse(responseCode = "401", description = "Unsuccessful authentication.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/basic-auth/{user}/{passwd}"
    )
    
    default Mono<ResponseEntity<Void>> basicAuthUserPasswdGet(
        @Parameter(name = "user", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user") String user,
        @Parameter(name = "passwd", description = "", required = true, in = ParameterIn.PATH) @PathVariable("passwd") String passwd,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /bearer : Prompts the user for authorization using bearer authentication.
     *
     * @param authorization  (optional)
     * @param token  (optional, default to 3bsvhis2g6re31r0occao8i7ph)
     * @return Sucessful authentication. (status code 200)
     *         or Unsuccessful authentication. (status code 401)
     */
    @Operation(
        operationId = "bearerGet",
        summary = "Prompts the user for authorization using bearer authentication.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessful authentication."),
            @ApiResponse(responseCode = "401", description = "Unsuccessful authentication.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bearer"
    )
    
    default Mono<ResponseEntity<Void>> bearerGet(
        @Parameter(name = "Authorization", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = false) String authorization,
        @Parameter(name = "token", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "token", required = false, defaultValue = "3bsvhis2g6re31r0occao8i7ph") String token,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /digest-auth/{qop}/{user}/{passwd}/{algorithm} : Prompts the user for authorization using Digest Auth + Algorithm.
     *
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @return Sucessful authentication. (status code 200)
     *         or Unsuccessful authentication. (status code 401)
     */
    @Operation(
        operationId = "digestAuthQopUserPasswdAlgorithmGet",
        summary = "Prompts the user for authorization using Digest Auth + Algorithm.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessful authentication."),
            @ApiResponse(responseCode = "401", description = "Unsuccessful authentication.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/digest-auth/{qop}/{user}/{passwd}/{algorithm}"
    )
    
    default Mono<ResponseEntity<Void>> digestAuthQopUserPasswdAlgorithmGet(
        @Parameter(name = "qop", description = "auth or auth-int", required = true, in = ParameterIn.PATH) @PathVariable("qop") String qop,
        @Parameter(name = "user", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user") String user,
        @Parameter(name = "passwd", description = "", required = true, in = ParameterIn.PATH) @PathVariable("passwd") String passwd,
        @Parameter(name = "algorithm", description = "MD5, SHA-256, SHA-512", required = true, in = ParameterIn.PATH) @PathVariable("algorithm") String algorithm,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after} : Prompts the user for authorization using Digest Auth + Algorithm.
     * allow settings the stale_after argument. 
     *
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param staleAfter  (required)
     * @return Sucessful authentication. (status code 200)
     *         or Unsuccessful authentication. (status code 401)
     */
    @Operation(
        operationId = "digestAuthQopUserPasswdAlgorithmStaleAfterGet",
        summary = "Prompts the user for authorization using Digest Auth + Algorithm.",
        description = "allow settings the stale_after argument. ",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessful authentication."),
            @ApiResponse(responseCode = "401", description = "Unsuccessful authentication.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}"
    )
    
    default Mono<ResponseEntity<Void>> digestAuthQopUserPasswdAlgorithmStaleAfterGet(
        @Parameter(name = "qop", description = "auth or auth-int", required = true, in = ParameterIn.PATH) @PathVariable("qop") String qop,
        @Parameter(name = "user", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user") String user,
        @Parameter(name = "passwd", description = "", required = true, in = ParameterIn.PATH) @PathVariable("passwd") String passwd,
        @Parameter(name = "algorithm", description = "MD5, SHA-256, SHA-512", required = true, in = ParameterIn.PATH) @PathVariable("algorithm") String algorithm,
        @Parameter(name = "stale_after", description = "", required = true, in = ParameterIn.PATH) @PathVariable("stale_after") String staleAfter,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /digest-auth/{qop}/{user}/{passwd} : Prompts the user for authorization using Digest Auth.
     *
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @return Sucessful authentication. (status code 200)
     *         or Unsuccessful authentication. (status code 401)
     */
    @Operation(
        operationId = "digestAuthQopUserPasswdGet",
        summary = "Prompts the user for authorization using Digest Auth.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessful authentication."),
            @ApiResponse(responseCode = "401", description = "Unsuccessful authentication.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/digest-auth/{qop}/{user}/{passwd}"
    )
    
    default Mono<ResponseEntity<Void>> digestAuthQopUserPasswdGet(
        @Parameter(name = "qop", description = "auth or auth-int", required = true, in = ParameterIn.PATH) @PathVariable("qop") String qop,
        @Parameter(name = "user", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user") String user,
        @Parameter(name = "passwd", description = "", required = true, in = ParameterIn.PATH) @PathVariable("passwd") String passwd,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /hidden-basic-auth/{user}/{passwd} : Prompts the user for authorization using HTTP Basic Auth.
     *
     * @param user  (required)
     * @param passwd  (required)
     * @return Sucessful authentication. (status code 200)
     *         or Unsuccessful authentication. (status code 404)
     */
    @Operation(
        operationId = "hiddenBasicAuthUserPasswdGet",
        summary = "Prompts the user for authorization using HTTP Basic Auth.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessful authentication."),
            @ApiResponse(responseCode = "404", description = "Unsuccessful authentication.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/hidden-basic-auth/{user}/{passwd}"
    )
    
    default Mono<ResponseEntity<Void>> hiddenBasicAuthUserPasswdGet(
        @Parameter(name = "user", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user") String user,
        @Parameter(name = "passwd", description = "", required = true, in = ParameterIn.PATH) @PathVariable("passwd") String passwd,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) throws Exception {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
