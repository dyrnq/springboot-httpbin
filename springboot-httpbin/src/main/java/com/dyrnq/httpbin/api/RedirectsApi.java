/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Redirects", description = "Returns different redirect responses")
public interface RedirectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /absolute-redirect/{n} : Absolutely 302 Redirects n times.
     *
     * @param n  (required)
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "absoluteRedirectNGet",
        summary = "Absolutely 302 Redirects n times.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/absolute-redirect/{n}"
    )
    
    default ResponseEntity<Void> absoluteRedirectNGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /redirect/{n} : 302 Redirects n times.
     *
     * @param n  (required)
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "redirectNGet",
        summary = "302 Redirects n times.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/redirect/{n}"
    )
    
    default ResponseEntity<Void> redirectNGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /redirect-to : 302/3XX Redirects to the given URL.
     *
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "redirectToDelete",
        summary = "302/3XX Redirects to the given URL.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/redirect-to"
    )
    
    default ResponseEntity<Void> redirectToDelete(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /redirect-to : 302/3XX Redirects to the given URL.
     *
     * @param url  (required)
     * @param statusCode  (optional)
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "redirectToGet",
        summary = "302/3XX Redirects to the given URL.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/redirect-to"
    )
    
    default ResponseEntity<Void> redirectToGet(
        @NotNull @Parameter(name = "url", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "url", required = true) String url,
        @Parameter(name = "status_code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status_code", required = false) Integer statusCode
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /redirect-to : 302/3XX Redirects to the given URL.
     *
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "redirectToPatch",
        summary = "302/3XX Redirects to the given URL.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/redirect-to"
    )
    
    default ResponseEntity<Void> redirectToPatch(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /redirect-to : 302/3XX Redirects to the given URL.
     *
     * @param url  (required)
     * @param statusCode  (optional)
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "redirectToPost",
        summary = "302/3XX Redirects to the given URL.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/redirect-to",
        consumes = { "*/*" }
    )
    
    default ResponseEntity<Void> redirectToPost(
        @Parameter(name = "url", description = "", required = true) @Valid @RequestParam(value = "url", required = true) String url,
        @Parameter(name = "status_code", description = "") @Valid @RequestParam(value = "status_code", required = false) Integer statusCode
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /redirect-to : 302/3XX Redirects to the given URL.
     *
     * @param url  (required)
     * @param statusCode  (optional)
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "redirectToPut",
        summary = "302/3XX Redirects to the given URL.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/redirect-to",
        consumes = { "*/*" }
    )
    
    default ResponseEntity<Void> redirectToPut(
        @Parameter(name = "url", description = "", required = true) @Valid @RequestParam(value = "url", required = true) String url,
        @Parameter(name = "status_code", description = "") @Valid @RequestParam(value = "status_code", required = false) Integer statusCode
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /relative-redirect/{n} : Relatively 302 Redirects n times.
     *
     * @param n  (required)
     * @return A redirection. (status code 302)
     */
    @Operation(
        operationId = "relativeRedirectNGet",
        summary = "Relatively 302 Redirects n times.",
        tags = { "Redirects" },
        responses = {
            @ApiResponse(responseCode = "302", description = "A redirection.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/relative-redirect/{n}"
    )
    
    default ResponseEntity<Void> relativeRedirectNGet(
        @Parameter(name = "n", description = "", required = true, in = ParameterIn.PATH) @PathVariable("n") Integer n
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
