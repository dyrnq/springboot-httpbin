/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Cookies", description = "Creates, reads and deletes Cookies")
public interface CookiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /cookies/delete : Deletes cookie(s) as provided by the query string and redirects to cookie list.
     *
     * @param freeform  (optional)
     * @return Redirect to cookie list (status code 200)
     */
    @Operation(
        operationId = "cookiesDeleteGet",
        summary = "Deletes cookie(s) as provided by the query string and redirects to cookie list.",
        tags = { "Cookies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Redirect to cookie list")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cookies/delete"
    )
    
    default ResponseEntity<Void> cookiesDeleteGet(
        @Parameter(name = "freeform", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "freeform", required = false) String freeform
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cookies : Returns cookie data.
     *
     * @return Set cookies. (status code 200)
     */
    @Operation(
        operationId = "cookiesGet",
        summary = "Returns cookie data.",
        tags = { "Cookies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Set cookies.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cookies"
    )
    
    default ResponseEntity<Void> cookiesGet(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cookies/set : Sets cookie(s) as provided by the query string and redirects to cookie list.
     *
     * @param freeform  (optional)
     * @return Redirect to cookie list (status code 200)
     */
    @Operation(
        operationId = "cookiesSetGet",
        summary = "Sets cookie(s) as provided by the query string and redirects to cookie list.",
        tags = { "Cookies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Redirect to cookie list")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cookies/set"
    )
    
    default ResponseEntity<Void> cookiesSetGet(
        @Parameter(name = "freeform", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "freeform", required = false) String freeform
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cookies/set/{name}/{value} : Sets a cookie and redirects to cookie list.
     *
     * @param name  (required)
     * @param value  (required)
     * @return Set cookies and redirects to cookie list. (status code 200)
     */
    @Operation(
        operationId = "cookiesSetNameValueGet",
        summary = "Sets a cookie and redirects to cookie list.",
        tags = { "Cookies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Set cookies and redirects to cookie list.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cookies/set/{name}/{value}"
    )
    
    default ResponseEntity<Void> cookiesSetNameValueGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "value", description = "", required = true, in = ParameterIn.PATH) @PathVariable("value") String value
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
