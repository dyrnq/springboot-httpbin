/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dyrnq.httpbin.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "HTTP Methods", description = "Testing different HTTP verbs")
public interface HttpMethodsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /delete : The request&#39;s DELETE parameters.
     *
     * @return The request&#39;s DELETE parameters. (status code 200)
     */
    @Operation(
        operationId = "deleteDelete",
        summary = "The request's DELETE parameters.",
        tags = { "HTTP Methods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's DELETE parameters.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/delete"
    )
    
    default ResponseEntity<Void> deleteDelete(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /get : The request&#39;s query parameters.
     *
     * @return The request&#39;s query parameters. (status code 200)
     */
    @Operation(
        operationId = "getGet",
        summary = "The request's query parameters.",
        tags = { "HTTP Methods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's query parameters.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/get"
    )
    
    default ResponseEntity<Void> getGet(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /patch : The request&#39;s PATCH parameters.
     *
     * @return The request&#39;s PATCH parameters. (status code 200)
     */
    @Operation(
        operationId = "patchPatch",
        summary = "The request's PATCH parameters.",
        tags = { "HTTP Methods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's PATCH parameters.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/patch"
    )
    
    default ResponseEntity<Void> patchPatch(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /post : The request&#39;s POST parameters.
     *
     * @return The request&#39;s POST parameters. (status code 200)
     */
    @Operation(
        operationId = "postPost",
        summary = "The request's POST parameters.",
        tags = { "HTTP Methods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's POST parameters.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/post"
    )
    
    default ResponseEntity<Void> postPost(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /put : The request&#39;s PUT parameters.
     *
     * @return The request&#39;s PUT parameters. (status code 200)
     */
    @Operation(
        operationId = "putPut",
        summary = "The request's PUT parameters.",
        tags = { "HTTP Methods" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request's PUT parameters.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/put"
    )
    
    default ResponseEntity<Void> putPut(
        
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
